name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:

trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: MyAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  # azureServiceConnectionId: '67f1dfc8-4a33-4f96-a2ec-1871da5d1f00'
  azureServiceConnectionId: '1142ac1e-0bb8-405d-b807-20096ea15775'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  
  
  # Environment name
  environmentName: 'test-vm'
  vmImageName: 'ubuntu-latest'
 

stages:
#--------------------------------------------#  
# Terraform - Infrastructure as Code
#--------------------------------------------#    
- stage: BuildInfrastructure
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure and install Terraform on the pipeline agent.
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
    
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'rg-udacity-storage-final-project'
        backendAzureRmStorageAccountName: 'tfstate2859914005'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'key1'
      
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: Terraform validate
    #   inputs:
    #     provider: 'azurerm'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     command: 'validate'

  
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: Terraform plan
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'plan'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'


    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: Terraform apply
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'


#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    # - task: CmdLine@2
    #   displayName: Install Nodejs
    #   inputs:
    #     script: 'sudo apt update && sudo apt upgrade -y && sudo apt install nodejs -y && sudo apt install npm -y'
    #     workingDirectory: $(System.DefaultWorkingDirectory)
      
    # - task: CmdLine@2
    #   displayName: 'Check Node Version'
    #   inputs:
    #     script: 'nodejs --version'

    # # ToDo: install newman
    # - task: CmdLine@2
    #   displayName: Install Newman
    #   inputs:
    #     script: 'sudo npm install -g newman'
    #     workingDirectory: $(System.DefaultWorkingDirectory)
    
    # - task: CmdLine@2
    #   displayName: 'check Newman version'
    #   inputs:
    #     script: 'newman -v'
    
    
         
    # # Postman Regression Test Suite     
    # # ToDo: Verify the working directory
    # - task: CmdLine@2
    #   displayName: Run Regression Tests
    #   continueOnError: true
    #   inputs:
    #     script: 'newman run regression.postman_collection.json -e regression-variables.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml --delay-request 60000'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    
    
    # Postman Data Validation Test Suite   
    # ToDo: Verify the working directory
    # - task: CmdLine@2
    #   displayName: Run Data Validation Tests
    #   continueOnError: true
    #   inputs:
    #     script: 'newman run validation.postman_collection.json -e validation_variables.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml --delay-request 60000'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    

    # - task: CmdLine@2
    #   displayName: 'Check generated Files'
    #   continueOnError: true
    #   inputs:
    #     script: 'ls -la'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '*.xml'
    #     searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    #     mergeTestResults: true
    #     testRunTitle: 'Postman Test Results'

    ####################################################### 

 #--------------------------------------------#
- stage: ArchiveApp
  jobs:
    - job: Archive
      steps:
        - task: ArchiveFiles@2
          displayName: 'Archive Selenium'
          inputs:
            rootFolderOrFile: 'automatedtesting/selenium'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/selenium.zip'
        - publish: '$(Build.ArtifactStagingDirectory)/selenium.zip'
          displayName: 'Upload selenium Package'
          artifact: selenium


        - task: ArchiveFiles@2
          displayName: 'Archive FakeRestAPI'
          inputs:
            rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/fakerapi-$(Build.BuildId).zip'
        - publish: '$(Build.ArtifactStagingDirectory)/fakerapi-$(Build.BuildId).zip'
          displayName: 'Upload fakerrestapi Package'
          artifact: fakerapi


#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: DeployFakeRestApi
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
  
    pool: MyAgentPool
    # pool: 
    #   # name: MyAgentPool
    #   # vmImage: $(vmImageName)
    #   vmImage: 'ubuntu-latest'   
    environment:  'test-vm'
      # name: $(environmentName)
      # name: 'test-vm'
      # resourceType: VirtualMachine  
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '1142ac1e-0bb8-405d-b807-20096ea15775'   
              # azureSubscription: '5dc66109-21e8-41d0-93b3-688f46cd4c4b'   
              appName: 'myDevopspApp3-AppService'               # ToDo
              appType: 'webAppLinux'
              resourceGroupName: 'rg-udacity-project-final'
              package: '$(Pipeline.Workspace)/fakerapi/fakerapi-$(Build.BuildId).zip'   # ToDo: Use the published zip artifact. 
              deploymentMethod: auto
              slotName: 'production'
              deployToSlotOrASE: true

                   #--------------------------------------------#    
          # # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
              script: |
                wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
                tar -xf apache-jmeter-5.2.1.tgz
                unzip -o $(Build.BuildId)-perftests.zip
                
                
                ./apache-jmeter-5.4.3/bin/jmeter -n -t ./automatedtesting/jmeter/stress_test.jmx -Jresdir=automatedtesting/jmeter/test_data.csv -l automatedtesting/jmeter/StressOutput.jtl -e -o ./automatedtesting/jmeter/stress_test_html_report/ -j ./automatedtesting/jmeter/jmeter_stress_test.log  
                cat ./automatedtesting/jmeter/jmeter_stress_test.log 
              workingDirectory: $(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above


#--------------------------------------------#  
# Selenium | Functional UI Tests
# ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment: 'test-vm'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: selenium    # ToDo: Change/provide a name
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/testuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/testuser/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/testuser/app
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."

